// PUBLIC FUNCTIONS:
new PlayerText:BSALogin_BG;
Function:CheckAccount(playerid)
{
	BSALogin_BG = CreatePlayerTextDraw(playerid, -1.120005, -0.166680, "mdl-2000:bsabg");
    PlayerTextDrawLetterSize(playerid, BSALogin_BG, 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, BSALogin_BG, 674.000000, 482.000000);
    PlayerTextDrawAlignment(playerid, BSALogin_BG, 1);
    PlayerTextDrawColor(playerid, BSALogin_BG, -1);
    PlayerTextDrawSetShadow(playerid, BSALogin_BG, 0);
    PlayerTextDrawSetOutline(playerid, BSALogin_BG, 0);
    PlayerTextDrawBackgroundColor(playerid, BSALogin_BG, 255);
    PlayerTextDrawFont(playerid, BSALogin_BG, 4);
    PlayerTextDrawSetProportional(playerid, BSALogin_BG, 0);
    PlayerTextDrawSetShadow(playerid, BSALogin_BG, 0);
	PlayerTextDrawShow(playerid, BSALogin_BG);
	if(cache_num_rows())
	{
		ShowLoginDialog(playerid, "");
	}
	else
	{
		ShowRegisterDialog(playerid, "");		
	}
	return true;
}

Function:ShowLoginDialog(playerid, error[])
{
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}
	new string[256];
	format(string, sizeof(string), "{FFFFFF}Welcome back to the server, %s\n\nPlease input your password below to login.", GetName(playerid));
	Dialog_Show(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Battlefield: San Andreas", string, "Login", "Leave");
	return true;
}

Function:ShowRegisterDialog(playerid, error[])
{
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}
	new string[256];
	format(string, sizeof(string), "{FFFFFF}Welcome to the server, %s\n\nPlease input a strong password below to register.", GetName(playerid));
	Dialog_Show(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Battlefield: San Andreas", string, "Register", "Leave");
	return true;
}

Function:OnPasswordHashed(playerid)
{
	new hash[BCRYPT_HASH_LENGTH], query[300], string[256];
	bcrypt_get_hash(hash);
	format(string, sizeof(string), "[SERVER]:{FFFFFF} You have successfully registered to the server as {3498db}%s{FFFFFF}, your account information is now being saved.", GetName(playerid));
	SendClientMessage(playerid, COLOR_IVDIGITAL, string);
	mysql_format(Database, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `IPAddress`, `Cash`, `Kills`, `Deaths`) VALUES ('%e', '%e', '%e', 0, 0, 0)", GetName(playerid), hash, ReturnIP(playerid));
	mysql_tquery(Database, query, "OnPlayerRegister", "d", playerid);
	return true;
}

Function:OnPlayerRegister(playerid)
{
	SetPlayerSpawn(playerid);
	SendClientMessage(playerid, COLOR_IVDIGITAL, "[SERVER]:{FFFFFF} Welcome to Battlefield: San Andreas, enjoy your stay!");
	return true;	
}

Function:OnPasswordChecked(playerid)
{
	new bool:match = bcrypt_is_equal();
	if(match)
	{
		new query[300], string[256];
		format(string, sizeof(string), "[SERVER]:{FFFFFF} You have successfully logged in as {3498db}%s{FFFFFF}, your account information is now being loaded.", GetName(playerid));
		SendClientMessage(playerid, COLOR_IVDIGITAL, string);
		mysql_format(Database, query, sizeof(query), "SELECT * FROM `players` WHERE `Username` = '%e'", GetName(playerid));
		mysql_tquery(Database, query, "OnPlayerLoad", "d", playerid);
	}
	else
	{
		ShowLoginDialog(playerid, "[ERROR]:{FFFFFF} You have entered an incorrect password.");
		LoginChance[playerid]++;
		if(LoginChance[playerid] == 3)
		{
			SendServerMessage(playerid, "You have been kicked for bad password attempts.");
			return KickEx(playerid);
		}
	}
	return true;
}

Function:OnPlayerLoad(playerid)
{
	cache_get_value_name_int(0, "ID", PlayerInfo[playerid][user_id]);
	cache_get_value_name_int(0, "Cash", PlayerInfo[playerid][user_cash]);
	cache_get_value_name_int(0, "Kills", PlayerInfo[playerid][user_kills]);
	cache_get_value_name_int(0, "Deaths", PlayerInfo[playerid][user_deaths]);

	LoggedIn[playerid] = true;
	SendClientMessage(playerid, COLOR_IVDIGITAL, "[SERVER]:{FFFFFF} Welcome back to our server! Your last login was {3498db}0 days and 0 hours ago {FFFFFF}({3498db}/logins{FFFFFF}).");
	SetPlayerSpawn(playerid);
	return true;
}

Function:DefaultValues(playerid)
{
	LoginChance[playerid] = 0;
	InLobby[playerid] = false;
	PlayerInfo[playerid][user_id] = 0;
	PlayerInfo[playerid][user_cash] = 0;
	PlayerInfo[playerid][user_kills] = 0;
	PlayerInfo[playerid][user_deaths] = 0;
	return true;
}

Function:SetPlayerSpawn(playerid)
{
	InLobby[playerid] = true;
	PlayerTextDrawHide(playerid, BSALogin_BG);
	SetSpawnInfo(playerid, 1, 0, -2384.9851, -555.0211, 129.1375, 161.9820, 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 200+playerid);
	SetPlayerCameraPos(playerid, -2386.2234,-558.7192,130.6172);
	SetPlayerCameraLookAt(playerid, -2384.0381,-552.0007,129.0110);	
	TogglePlayerControllable(playerid, false);
	return true;
}

Function:OnPasswordChanged(playerid)
{
	new hash[BCRYPT_HASH_LENGTH], query[300];
	bcrypt_get_hash(hash);
	mysql_format(Database, query, sizeof(query), "UPDATE `players` SET `Password` = '%e' WHERE `Username` = '%e'", hash, GetName(playerid));
	mysql_query(Database, query);
	SendClientMessage(playerid, -1, "You have successfully changed your password.");
	return true;
}

Function:KickPlayer(playerid)
{
	Kick(playerid);
}

// STOCK FUNCTIONS:
GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

ReturnIP(playerid)
{
	new PlayerIP[17];
	GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
	return PlayerIP;
}

GetDate()
{
	new sendString[90], MonthStr[40], month, day, year;
	new hour, minute, second;

	gettime(hour, minute, second);
	getdate(year, month, day);
	switch(month)
	{
	    case 1:  MonthStr = "January";
	    case 2:  MonthStr = "February";
	    case 3:  MonthStr = "March";
	    case 4:  MonthStr = "April";
	    case 5:  MonthStr = "May";
	    case 6:  MonthStr = "June";
	    case 7:  MonthStr = "July";
	    case 8:  MonthStr = "August";
	    case 9:  MonthStr = "September";
	    case 10: MonthStr = "October";
	    case 11: MonthStr = "November";
	    case 12: MonthStr = "December";
	}

	format(sendString, 90, "%s %d, %d %02d:%02d:%02d", MonthStr, day, year, hour, minute, second);
	return sendString;
}

strmatch(const String1[], const String2[])
{
    if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

KickEx(playerid)
{
	SetTimerEx("KickPlayer", 500, false, "i", playerid);
	return true;
}

